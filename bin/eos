#!/bin/bash
#
# EOS node manager
# Original release under GNU AGPL by Someguy123
# Modified by Yanis Tsaunya
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DOCKER_DIR="$DIR/dkr"
DATADIR="$DIR/../data"
MOUNTDIR="/opt/eos/bin/data-dir"
DOCKER_NAME="seed"

# default. override in .env
PORTS="8888,9876"

if [[ -f .env ]]; then
    source .env
fi

IFS=","
DPORTS=()
for i in $PORTS; do
    if [[ $i != "" ]]; then
            DPORTS+=("-p0.0.0.0:$i:$i")
    fi
done

help() {
    echo "Usage: $0 COMMAND [DATA]"
    echo
    echo "Commands: "
    echo "    start - starts eos container"
    echo "    replay - starts eos container (in replay mode)"
    echo "    shm_size - resizes /dev/shm to size given, e.g. ./run.sh shm_size 10G "
    echo "    stop - stops eos container"
    echo "    status - show status of eos container"
    echo "    restart - restarts eos container"
    echo "    pull - pulls latest docker image from server (no compiling)"
    echo "    logs - show all logs inc. docker logs, and eos logs"
    echo "    wallet - open cli_wallet in the container"
    echo "    remote_wallet - open cli_wallet in the container connecting to a remote seed"
    echo "    shell - enter a bash session in the container"
    echo
    exit
}

pull() {
    echo "Loading image from asp1d/eosio"
    docker pull asp1d/eosio:020218
    echo "Tagging as eos"
    docker tag asp1d/eosio eos
    echo "Installation completed. You may now configure or run the server"
}

seed_exists() {
    seedcount=$(docker ps -a -f name="^/"$DOCKER_NAME"$" | wc -l)
    if [[ $seedcount -eq 2 ]]; then
        return 0
    else
        return -1
    fi
}

seed_running() {
    seedcount=$(docker ps -f 'status=running' -f name=$DOCKER_NAME | wc -l)
    if [[ $seedcount -eq 2 ]]; then
        return 0
    else
        return -1
    fi
}

start() {
    echo "Starting container..."
    seed_exists
    if [[ $? == 0 ]]; then
        docker start $DOCKER_NAME
    else
        docker run ${DPORTS[@]} -v /dev/shm:/shm -v "$DATADIR":"$MOUNTDIR" -d --name $DOCKER_NAME -t eos start_eosiod.sh
    fi
}

replay() {
    echo "Removing old container"
    docker rm -f $DOCKER_NAME
    echo "Running eos with replay..."
    docker run ${DPORTS[@]} -v /dev/shm:/shm -v "$DATADIR":"$MOUNTDIR" -d --name $DOCKER_NAME -t eos eosd --replay
    echo "Started."
}

shm_size() {
    echo "Setting SHM to $1"
    mount -o remount,size=$1 /dev/shm
}

stop() {
    echo "Stopping container..."
    docker stop $DOCKER_NAME
    docker rm $DOCKER_NAME
}

shell() {
    docker exec -it $DOCKER_NAME bash
}

wallet() {
    docker exec -it $DOCKER_NAME eosioc wallet "${@}"
}

client() {
    docker exec -it $DOCKER_NAME eosioc "${@}"
}

remote_wallet() {
    docker run -v "$DATADIR":"$MOUNTDIR" --rm -it eos eosc -H testnet1.eos.io -p 80 wallet "${@}"
}

logs() {
    echo "DOCKER LOGS: "
    docker logs -f --since 1s $DOCKER_NAME
}

status() {

    seed_exists
    if [[ $? == 0 ]]; then
        echo "Container exists?: YES"
    else
        echo "Container exists?: NO (!)"
        echo "Container doesn't exist, thus it is NOT running. Run $0 build && $0 start"
        return
    fi

    seed_running
    if [[ $? == 0 ]]; then
        echo "Container running?: YES"
    else
        echo "Container running?: NO (!)"
        echo "Container isn't running. Start it with $0 start"
        return
    fi

}

if [ "$#" -lt 1 ]; then
    help
fi

case $1 in

    pull)
        pull
        ;;
    start)
        start
        ;;
    replay)
        replay
        ;;
    shm_size)
        shm_size $2
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 5
        start
        ;;
    status)
        status
        ;;
    wallet)
        shift
        wallet "${@}"
        ;;
    remote_wallet)
        shift
        remote_wallet "${@}"
        ;;
    client)
        shift
        client "${@}"
        ;;
    shell)
        shell
        ;;
    logs)
        logs
        ;;
    *)
        echo "Invalid cmd"
        help
        ;;
esac
